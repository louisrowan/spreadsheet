_______________________
new feature list:
1. select multiple cells using shift key
2. select all cells
3. color cells
4. show cut/copy/paste cell boundaries
5. sort selected cells
6. sum cells
7. clicking a row or column header should make all of its cells active and paint the draggable div around them
8. try using webpack

_______________________


_____________________
6. sum cell notes:

problem: summation calculated needs to update

solution:
- 'summed cell' needs to keep track of which cells it is a product of
- event listeners need to be added to each of these cells. when input changes, summed cell needs to be alerted and recalculate
- when summed cell is reassigned to different value, these event listeners need to be removed


-individual event liseners vs one major listener

- better approach might be ONE event listener for ALL inputs
- need to save in state somewhere a list of which cells have a value that is depended upon by others

= save as object with the cell's key
<value in state> : 'c1r1': {},
                    'c1r2': <recalculating function>



looks pretty good now
______________

5. sort selected cells:

functionality:
- selected cells, click 'sort asc' and they sort in ascending order
- same for desc
- these cells should be in a column only
- when multiple column selected

solution a:
- sort button is dropdown button. when clicked it displays a list of all possible sort options, listing by table header(if avail) or column label. both asc and desc







_________________________
data structure for all cells

object
key: id
value: cell

this makes it easy to both loop through all cells and also retrieve a specific one should we know the id.

NEVER add to allCells array. only mutate.








_________________


## Handling copy/paste

desired functionality:
1. copy multiple cells
2. select new cell
3. paste in copied cells in same format as had been copied

Idea:
- could have _state.copied, which is an array (default []) of the copied cells. When pasting, paste the exact new cells.


Issues:
 - need to be mindful of cell Ids and input Ids
 - knowing the shape of the cells


 New idea:
 - find row, col square of selection


Question: 
 Do Id's need to persist? Or is it ok for them to change. 



 -------------------------------
 file structure

 1. group together things based on the functionality. so everything relating to cells goes in one area, toolbar another, etc.

 pro:
 - related code near each other
 - 

cons:
- not as easy to organize


example:
cell/elements.js
cell/styles.js
cell/eventListeners.js
cell/eventHandlers.js
cell/common.js



 2. group together things based on the type of thing. so one area for 'object', one for styling, one for click handlers, etc.

 pro:
 - a more uniformed approach


 cons:
 - related pieces of code in different areas
 - could be harder to know what goes where





____________-to do:
- clean up handlePaste and split into multiple parts that could be re-used in future
- find a way to add some tests to avoid all manual tests

